local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local Stats = game:GetService("Stats")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = Workspace.CurrentCamera
local GetGuiInset = GuiService.GetGuiInset

local AimlockEnabled = true
local Locked = false
local Target
local AimPart = "UpperTorso"
local AimKey = "Q"
local DisableKey = "P"
local FOVEnabled = true
local ShowFOV = false
local FOVSize = 55
local PredictionEnabled = true
local Prediction = 0.24

local function UpdateFOV()
    if FOVEnabled then
        local fovCircle = Drawing.new("Circle")
        fovCircle.Position = Vector2.new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
        fovCircle.Radius = FOVSize * 2
        fovCircle.Thickness = 1
        fovCircle.NumSides = 1000
        fovCircle.Visible = ShowFOV
        fovCircle.Color = Color3.fromRGB(255, 255, 0)
        return fovCircle
    end
end

local function WorldToViewportPoint(position)
    return Camera:WorldToViewportPoint(position)
end

local function GetClosestPlayer()
    local closestPlayer
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            local pos = Camera:WorldToViewportPoint(player.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude

            if (not FOVEnabled or magnitude < shortestDistance) then
                closestPlayer = player
                shortestDistance = magnitude
            end
        end
    end

    return closestPlayer
end

local function LockOntoClosestPlayer()
    if AimlockEnabled then
        Locked = not Locked
        Target = Locked and GetClosestPlayer() or nil

        if Locked and Target then
            StarterGui:SetCore("SendNotification", {
                Title = "Aimlock",
                Text = "Locked onto: " .. Target.Name,
                Duration = 3
            })
        elseif not Locked then
            StarterGui:SetCore("SendNotification", {
                Title = "Aimlock",
                Text = "Unlocked",
                Duration = 3
            })
        end
    else
        StarterGui:SetCore("SendNotification", {
            Title = "Aimlock",
            Text = "Aimlock is not enabled",
            Duration = 3
        })
    end
end

local function ToggleAimlockState()
    AimlockEnabled = not AimlockEnabled
    StarterGui:SetCore("SendNotification", {
        Title = "Aimlock",
        Text = "Aimlock " .. (AimlockEnabled and "enabled" or "disabled"),
        Duration = 3
    })
end

local function CheckAimKeys(input)
    if input.KeyCode == Enum.KeyCode[AimKey] then
        LockOntoClosestPlayer()
    elseif input.KeyCode == Enum.KeyCode[DisableKey] then
        ToggleAimlockState()
    end
end

Mouse.KeyDown:Connect(CheckAimKeys)

RunService.RenderStepped:Connect(function()
    UpdateFOV()

    if AimlockEnabled and Locked and Target and Target.Character then
        local targetPosition = Target.Character[AimPart].Position + (Target.Character[AimPart].Velocity * Prediction)
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
    end
end)

while true do
    if PredictionEnabled then
        local pingValue = Stats.Network.ServerStatsItem["Data Ping"]:GetValueString()
        local ping = tonumber(string.split(pingValue, '(')[1])

        if ping then
            if ping < 225 then
                Prediction = 1.4
            elseif ping < 215 then
                Prediction = 0.24
            -- Add more ping-based prediction adjustments here
            end
        end
    end

    RunService.Heartbeat:Wait()
end
